<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>anuled.dynamicstore</groupId>
	<artifactId>dynamic-store</artifactId>
	<packaging>jar</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>dynamic-store</name>
	<url>https://anulinkedearth.org/</url>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>apache-jena-libs</artifactId>
			<type>pom</type>
			<version>3.1.0</version>
		</dependency>
		<dependency>
			<groupId>com.sparkjava</groupId>
			<artifactId>spark-core</artifactId>
			<version>2.5</version>
		</dependency>
		<!-- Check out jena-fuseki-server's pom.xml to how to build a runnable 
			Fuseki jar -->
		<!-- <dependency> -->
		<!-- <groupId>org.apache.jena</groupId> -->
		<!-- <artifactId>jena-fuseki-core</artifactId> -->
		<!-- <version>2.4.0</version> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>org.apache.jena</groupId> -->
		<!-- <artifactId>jena-cmds</artifactId> -->
		<!-- <version>3.1.0</version> -->
		<!-- </dependency> -->
		<dependency>
			<groupId>ch.systemsx.cisd</groupId>
			<artifactId>jhdf5</artifactId>
			<version>14.12.6-r36356</version>
		</dependency>
		<dependency>
			<!-- This is here to shut up SLF4J, which gives a warning during unit 
				testing if no logger implementation is on the classpath. Test scope is important, 
				since we don't want to force a nop logger in the final build. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-nop</artifactId>
			<version>1.7.21</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.1.0-RC.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.1</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<!-- I used to have this as the main class of the produced jar, but 
									I've sinced realised that a better deployment model is to use ordinary Fuseki 
									with the Java classpath modified to include our custom implementation stuff 
									as necessary. -->
								<!-- <transformer -->
								<!-- implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"> -->
								<!-- <mainClass>org.apache.jena.fuseki.cmd.FusekiCmd</mainClass> -->
								<!-- </transformer> -->
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.7.201606060606</version>
				<configuration>
					<excludes>
						<exclude>anuled/vocabulary/*</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
